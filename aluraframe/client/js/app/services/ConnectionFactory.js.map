{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","constructor","Error","getConnection","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","forEach","store","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;AAAA,IAAIA,oBAAqB,YAAY;AACjC,UAAMC,SAAS,CAAC,aAAD,CAAf;AACA,UAAMC,UAAU,CAAhB;AACA,UAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA,WAAO,MAAML,iBAAN,CAAwB;;AAE3BM,sBAAc;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAED,eAAOC,aAAP,GAAuB;AACnB,mBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAU,4BAAYI,eAAZ,GAA8BC,KAAK;AAC/BhB,2BAAOiB,OAAP,CAAeC,SAAS;AACpBnB,0CAAkBoB,aAAlB,CAAgCH,EAAEI,MAAF,CAASC,MAAzC;AACH,qBAFD;AAGH,iBAJD;;AAMAV,4BAAYW,SAAZ,GAAwBN,KAAK;AACzB,wBAAI,CAACb,UAAL,EAAiB;AACbA,qCAAaa,EAAEI,MAAF,CAASC,MAAtB;AACAjB,gCAAQD,WAAWC,KAAX,CAAiBmB,IAAjB,CAAsBpB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAY;AAC3B,kCAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,yBAFD;AAGH;;AAEDG,4BAAQN,UAAR;AACH,iBAVD;;AAYAQ,4BAAYa,OAAZ,GAAsBR,KAAK;AACvBS,4BAAQC,GAAR,CAAYV,EAAEI,MAAF,CAASO,KAArB;;AAEAjB,2BAAOM,EAAEI,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAJD;AAKH,aA1BM,CAAP;AA2BH;;AAED,eAAOT,aAAP,CAAqBhB,UAArB,EAAiC;AAC7BH,mBAAOiB,OAAP,CAAeC,SAAS;AACpB,oBAAIf,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCZ,KAArC,CAAJ,EAAiD;AAC7Cf,+BAAW4B,iBAAX,CAA6Bb,KAA7B;AACH;;AAEDf,2BAAW6B,iBAAX,CAA6Bd,KAA7B,EAAoC,EAAEe,eAAe,IAAjB,EAApC;AACH,aAND;AAOH;;AAED,eAAOC,eAAP,GAAyB;;AAErB,gBAAI/B,UAAJ,EAAgB;AACZC;AACAD,6BAAa,IAAb;AAEH;AACJ;AArD0B,KAA/B;AAuDH,CA/DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    stores.forEach(store => {\r\n                        ConnectionFactory._createStores(e.target.result);\r\n                    });\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if (!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function () {\r\n                            throw new Error('Você não pode fechar diretamente a conexão');\r\n                        };\r\n                    }\r\n\r\n                    resolve(connection);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStores(connection) {\r\n            stores.forEach(store => {\r\n                if (connection.objectStoreNames.contains(store)) {\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n\r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n\r\n            if (connection) {\r\n                close();\r\n                connection = null;\r\n\r\n            }\r\n        }\r\n    }\r\n})();"]}