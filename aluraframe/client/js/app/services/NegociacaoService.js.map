{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","constructor","_http","HttpService","obterNegociacoes","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","periodos","negociacoes","reduce","dados","periodo","concat","catch","erro","Error","get","console","log","map","objeto","Negociacao","Date","data","quantidade","valor","cadastra","negociacao","ConnectionFactory","getConnection","connection","NegociacaoDao","dao","adiciona","lista","listaTodos","apaga","apagaTodos","importa","listaAtual","filter","some","negociacaoExistente","isEquals"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n        return this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n\r\n                console.log(negociacoes);\r\n\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações da semana');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        return this._http\r\n            .get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n\r\n                console.log(negociacoes);\r\n\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações da semana anterior');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        return this._http\r\n            .get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n\r\n                console.log(negociacoes);\r\n\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\r\n            });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociacao cadastrada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar negociacao')\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar negociacao')\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações')\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao =>\r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error(\"Não foi possível importar as negociações\");\r\n            });\r\n    }\r\n}"]}